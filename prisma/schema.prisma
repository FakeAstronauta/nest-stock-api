// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// one to many, several products may containt the same category 
model Warehouse {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(250)
  stock          Stock[]
  warehouseUsers warehouseUsers[]
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(250)
  warehouseUsers warehouseUsers[]
}

model Users {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(250)
  lastName       String           @db.VarChar(250)
  bornAt         DateTime         @db.Date
  dui            String           @unique @db.Char(9)
  state          Boolean
  registerAt     DateTime         @default(now()) @db.Date
  updatedAt      DateTime         @updatedAt @db.Date
  warehouseUsers warehouseUsers[]
}

model warehouseUsers {
  // id          Int         @id @default(autoincrement())
  userId      Int         @id @unique
  users       Users       @relation(fields: [userId], references: [id])
  roleId      Int
  role        Role        @relation(fields: [roleId], references: [id])
  warehouseId Int
  warehouse   Warehouse   @relation(fields: [warehouseId], references: [id])
  Purchases   Purchases[]
}

// one to many, several products may containt the same category
// contain default values
model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(250)
  product Product[]
}

// only provides identity of the individual product, not bulk
// May contain updated values
model Product {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(250)
  producedAt    DateTime?       @db.Date
  expiresAt     DateTime?       @db.Date
  categoryId    Int
  category      Category        @relation(fields: [categoryId], references: [id])
  cost          Decimal
  state         Boolean
  registerAt    DateTime        @default(now()) @db.Date
  updatedAt     DateTime?       @updatedAt @db.Date
  purchaseItems PurchaseItems[]
  Stock         Stock[]
}

// only purchase details, not were was saved
model Purchases {
  id              Int             @id @default(autoincrement())
  warehouseUserId Int
  warehouseUser   warehouseUsers  @relation(fields: [warehouseUserId], references: [userId])
  amount          Decimal // final price
  purchaseCode    String
  purchaseItems   PurchaseItems[]
  registedAt      DateTime        @default(now()) @db.Date
  updatedAt       DateTime        @updatedAt @db.Date
}

// many-to-many table
// this makes easy to register only for individual items details
model PurchaseItems {
  id         Int       @id @default(autoincrement())
  productId  Int
  product    Product   @relation(fields: [productId], references: [id])
  purchaseId Int
  purchase   Purchases @relation(fields: [purchaseId], references: [id])
  quantity   Int
  price      Decimal
  unit       String
  total      Decimal // total of every type of product
}

// Ready to be selled
model Stock {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  price       Float // deducted from product
  quantity    Int
  unit        String
  total       Float
  registedAt  DateTime  @default(now()) @db.Date
  Warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
}
